@inject CounterState CounterState
@implements IDisposable

<ContentView>
    <StackLayout>
        <StackLayout Margin="new Thickness(20)" Orientation="StackOrientation.Horizontal">
            <Label Text="@($"Hello, World! {CounterState.CurrentCount}")" FontSize="40" HorizontalOptions="LayoutOptions.StartAndExpand" />
            <Button Text="Increment" OnClick="@CounterState.IncrementCount" VerticalOptions="LayoutOptions.Center" Padding="10" />
        </StackLayout>

        @*
        <WebView Source=@(new HtmlWebViewSource { Html = htmlSource }) OnWebMessageReceived="HandleWebMessage" @ref="myWebView" />

        <WebView Source=@(new UrlWebViewSource { Url = "https://en.wikipedia.org/wiki/HTML" }) VerticalOptions="LayoutOptions.FillAndExpand" />

        <BlazorWebView>
            <h1>Web content [@CounterState.CurrentCount]</h1>
            <p>This is web within native, all Blazor</p>
            <button @onclick="@IncrementCount">Increment</button>
        </BlazorWebView>
        *@

        <BlazorWebView ContentRoot="WebUI/wwwroot" VerticalOptions="LayoutOptions.FillAndExpand">
            <MyApplication.WebUI.App />
        </BlazorWebView>

    </StackLayout>
</ContentView>


@code {
    protected override void OnInitialized()
    {
        CounterState.StateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        CounterState.StateChanged -= StateHasChanged;
    }

    BlazorDesktop.Components.WebView myWebView;

    string htmlSource = @"<html><body>
    <p>Welcome to WebView.</p>
    <button onclick=""window.external.sendMessage('blah😋')"">Invoke .NET</button>
    <script>
        window.external.receiveMessage(function (message) {
            alert(message);
        });
    </script>
    </body>
    </html>";

    void HandleWebMessage(string data)
    {
        myWebView.SendMessage($"Received: {data}");
    }
}
